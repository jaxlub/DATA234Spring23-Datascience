---
title: "Section 3 - dplyr"
author: "Jax Lubkowitz"
format: 
  html:
    embed-resources: true
---

# Dplyer
```{r}
library(babynames)
library(tidyverse)
```

```{r}
test_df <- babynames |> filter(name == "Jax" & sex == "M")
ggplot(data = test_df , aes(x = year, y = n)) +
  geom_line()
```

#Section 3.1 Homework Problems
## Excercise 1,2,3,4
```{r}
jax_df <- babynames |> filter(name == "Jax")
onwards <- babynames |> filter( year >= 2000)
both <- babynames |> filter(name == "Jax" & year >=2000)
slice_prac <- both |> slice_head( n = 20)
```
# Excercise 5
```{r}
arranged <- babynames |> arrange(desc(prop))
```
# Excercise 6
With a categorical variable it seems to go alphabetical.
```{r}
name_arrange <- babynames |> arrange(name)
```
# Excercise 7
```{r}
select_one <- babynames |> select(name, year, prop)
select_two <- babynames |> select(-sex, -n)
```
# Excercise 8
Done

# Excercise 9
```{r}
fitness_full <- read_csv("https://raw.githubusercontent.com/highamm/ds234_quarto/main/data_online/higham_fitness_clean.csv",
                         col_types = list(stepgoal = col_factor())) |>
  mutate(weekend_ind = case_when(weekday == "Sat" | weekday == "Sun" ~ "weekend",
                                 TRUE ~ "weekday"))
filtered_df <- fitness_full |> filter(active_cals > 50)
```


# Class Excercises
```{r}
ten_male <- babynames |>
  filter(year == 2017 & sex == 'M') |>
  arrange(desc(n)) |> 
  slice(1:10)
```

```{r}
ggplot(data = ten_male) +
  geom_col(aes(x = name, y = n))
```

```{r}
zelda_name <- babynames |> filter(name == "Zelda" & sex == "F")
ggplot(data = zelda_name, aes(x = year, y = n)) +
  geom_line()
```

fitness_df becomes first arg of mean but mean doesnt take dataframes. 

your turn excercises
```{r}
test1 <- babynames |> filter(year != "1945")
test2 <- babynames |> filter( n > 400 & n < 5000)
test3 <- babynames |> filter(sex == "F" & name == "Monica" | name == "Hillary")

ggplot(data = test3) +
  geom_line(aes(x = year, y = n)) + 
  facet_wrap(~name)

five_names_label <- five_names |> filter(year ==max(year))

five_names <- babynames |> filter(sex == "M" & name == "Jax" | sex == "F" & name == "Lilli" | sex == "M" & name == "Mac" | sex == "M" & name == "Dan" | sex == "F" & name == "Etta")
ggplot(data = five_names, aes(x = year, y = n, colour = name))+
  geom_line() +
  geom_label(data = five_names_label, aes(label = name))


test4 <- babynames |> filter(year == "2002" & sex == "M") |> arrange(desc(prop)) |> slice(1:10)

ggplot(data = test4) +
  geom_col(aes(x = name, y = prop))
```


```{r}
slumajors_df <- read_csv("https://raw.githubusercontent.com/highamm/ds234_quarto/main/data_online/SLU_Majors_17_21.csv")
slumajors_df
```
# Homeworks
## Excercise 1
```{r}
slumajors_df |> mutate(major_size = if_else(nfemales + nmales >= 100, 
                                            true = "Large",
                                            false = "Small"))
```

## Excercise 2
```{r}
slumajors_df |> mutate(majorsize2 = case_when(nfemales+nmales >= 150 ~ "Large",
                                              (nmales+nfemales > 40 & nmales+nfemales < 150) ~ "Medium",
                                              nmales+nfemales <= 40 ~ "Small"))
```

## Excercise 3
```{r}
slumajors_df |> mutate(ratio = nfemales/nmales)
```

## Excercise 4
```{r}
slumajors_df |> summarise(Females = sum(nfemales), Males = sum(nmales))
```

## Excercise 5
```{r}
babynames |> group_by(name) |> summarise(Count = sum(n))
```

## Excercise 6
```{r}
babynames |> group_by(name) |> summarise(count = n())
```

```{r}
toy_df <- tibble(x = c(NA, 3, 4, 7),
                 y = c(1, 4, 3, 2),
                 z = c("A", "A", "B", NA))
```

## Excercise 7
```{r}
toy_df |> filter(!is.na(z))
```

Class Excercise 4/5
```{r}
popularity <- babynames |> group_by(year,sex) |> mutate(rank_popularity = rank(desc(n)))
popularity |> filter(rank_popularity == 1) |> 
  ungroup() |> 
  group_by(name) |> 
  summarise(n_appearances = n()) |> 
  arrange(desc(n_appearances))
```


```{r}
babynames_test <- babynames |>
  group_by(year, sex) |> mutate(ntest = n / prop)
babynames_test |> slice(1, 2, 3, 4, 5)
```


```{r}
toy_df |> group_by(z) |> mutate(ztest = z)
toy_df |> mutate(ztest = z) |> group_by(z)

toy_df |> group_by(y, z) |> slice(1,2)
toy_df |> slice(1,2) |> group_by(y, z)

toy_df |> group_by(y, z) |> filter(y>2)
toy_df |> filter(y>2) |> group_by(y, z)

toy_df |> group_by(y, z) |> arrange(y)
toy_df |> arrange(y) |> group_by(y, z)

toy_df |> group_by(y, z) |> select(y)
toy_df |> select(y) |> group_by(y, z)
```

```{r}
##NA
toy_df |> mutate(sum_x_y = x+y)
# NA is carried over and the sum of x+y where na is present is also NA

## when arranging NA always go last
toy_df |> arrange(x)

toy_df |> filter(x<4)
##NA is dropped in condition

toy_df |> summarise(mean_x = mean(x))
## returns NA because we dont know one of the x values and can be eliminated with "na.rm = TRUE"

toy_df |> group_by(z) |> summarise(mean_x = mean(x))
## for group where x is missing the mean value is also missing
## NA gets treated as its own group.
```

```{r}
tester <-babynames |> group_by(year) |> summarise(n_unique = n())
```

```{r}
slumajors_df |> mutate(testcase = case_when(percfemale >= 40 ~ "Yes",
                                            percfemale > 60 ~ "No")) |>
  relocate(testcase)
# Rows that satisifies none get NA
# First assignment true  means second never compares. 
```

```{r}
 babynames |> group_by(name) |> summarise(n_birth = sum(n)) |> arrange(desc(n_birth))
```















