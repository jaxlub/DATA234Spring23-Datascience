---
title: "Section8-Forcats"
author: "Jax Lubkowitz"
format: 
  html:
    embed-resources: true
---
```{r}
#| echo: false
#| warning: false


library(tidyverse)
library(here)
library(forcats)
pokemon_df <- read_csv(here("data/pokemon_allgen.csv")) |>
  mutate(Generation_cat = factor(Generation))
```

```{r}
#| echo: false
#| warning: false


pokemon_df |> group_by(`Type 1`) |>
  summarise(counttype = n())
```

```{r}
#| echo: false
#| warning: false

pokemon_legend <- pokemon_df |> filter(Legendary == TRUE) |>
  group_by(Generation_cat) |>
  summarise(nlegend = n())
ggplot(data = pokemon_legend, aes(x = Generation_cat, y = nlegend)) +
  geom_col() +
  theme_minimal()
```

```{r}
#| echo: false
#| warning: false

pokemon_legend <- pokemon_legend |>
  mutate(Generation_cat2 = fct_recode(Generation_cat,
                                      Kanto = "1", Johto = "2",
                                      Hoenn = "3", Sinnoh = "4",
                                      Unova = "5", Kalos = "6")) |>
  select(Generation_cat2, everything())
head(pokemon_legend)

ggplot(data = pokemon_legend,
       aes(x = Generation_cat2, y = nlegend)) +
  geom_col() +
  theme_minimal()
```

```{r}
#| echo: false
#| warning: false

pokemon_long <- pokemon_df |> pivot_longer(c(`Type 1`, `Type 2`),
                            names_to = "Number",
                            values_to = "Type")
pokemon_long |>
  mutate(new_type = fct_collapse(Type, Coolest = c("Ice", "Dark"),
                                 Least_Cool = c("Fire", "Fighting", "Poison"))) |>
  select(new_type, Type, everything())

```

# Exercise 1
We could use a case when and manually do it, but would require us to write out every single case for every type and thus would be much more work. 

# Exercise 2
```{r}
fruit_df <- tibble::tibble(fruit = c("A", "B", "B", "A"))

fruit_df |> mutate(fruits = fct_recode(fruit, Apple = "A", Banana = "B"))

```


```{r}
#| echo: false
#| warning: false

pokemon_nodup <- pokemon_df |> group_by(`#`) |> slice(1) |>
  ungroup()
pokemon_long <- pokemon_nodup |>
  pivot_longer(c(`Type 1`, `Type 2`),
               names_to = "Number",
               values_to = "Type")
pokemon_sum <- pokemon_long |>
  group_by(Type) |>
  summarise(count_type = n()) |>
  filter(!is.na(Type))
ggplot(data = pokemon_sum, aes(x = Type,
                               y = count_type)) +
  geom_col() +
  coord_flip() + ## flips the x and y axes
  theme_minimal()
```

```{r}
#| echo: false
#| warning: false

pokemon_sum <- pokemon_sum |> 
  mutate(Type_ordered = fct_reorder(.f = Type, .x = count_type))
ggplot(data = pokemon_sum, aes(x = Type_ordered,
                               y = count_type)) +
  geom_col() +
  coord_flip() +
  theme_minimal()
```

```{r}
#| echo: false
#| warning: false


ggplot(data = pokemon_sum, aes(x = Type_ordered,
                               y = count_type)) +
  geom_segment(aes(x = Type_ordered, xend = Type_ordered,
                   y = 0, yend = count_type)) +
  geom_point() +
  coord_flip() +
  theme_minimal()
```

```{r}
#| echo: false
#| warning: false


pokemon_long <- pokemon_long |>
  filter(!is.na(Type)) |>
  mutate(Type_Deford = fct_reorder(.f = Type, .x = Defense,
                                   .fun = median))
ggplot(data = pokemon_long, aes(x = Type_Deford,
                               y = Defense)) +
  geom_boxplot() + 
  coord_flip() +
  theme_minimal()
```

```{r}
#| echo: false
#| warning: false


mortality_df <- read_csv(here("data/gun_violence_us.csv")) |>
  mutate(region = factor(region))
```

```{r}
#| echo: false
#| warning: false


ggplot(data = mortality_df,
       aes(x = ownership_rate, y = mortality_rate, colour = region)) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_minimal()
```

```{r}
#| echo: false
#| warning: false


mortality_df <- mortality_df |>
  mutate(region_3 = fct_relevel(region, c("South", "West", "MW", "NE")))
ggplot(data = mortality_df,
       aes(x = ownership_rate, y = mortality_rate, colour = region_3)) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_minimal()
```


# Exercise 3
```{r}
pokemon_long <- pokemon_long |>
  filter(!is.na(Type)) |>
  mutate(Type_Deford = fct_reorder(.f = Type, .x = Defense,
                                   .fun = max))
ggplot(data = pokemon_long, aes(x = Type_Deford,
                               y = Defense)) +
  geom_boxplot() + 
  coord_flip() +
  theme_minimal()
```



```{r}
pokemon_df |> distinct('#', .keep_all = TRUE)
```

Forcots function dont reorder well if df is grouped. 

```{r}
library(tidyverse)
library(here)
standings_df <- read_csv(here("data/standings.csv"))

table(standings_df$team_name)


standings_df <- standings_df |> mutate(team_name = fct_recode(team_name, Commanders = "Redskins"))

standings_df <- standings_df |> unite("franchise", c(team, team_name), sep = " ")

standings_df <- standings_df |> mutate(franchise = fct_collapse(franchise, 'St. Louis LA Chargers' = c("San Diego Chargers","Los Angeles Chargers"), 'St. Louis LA Rams' = c("St. Louis Rams", "Los Angeles Rams")))
                                                            

standings_df |> mutate(playoffs_ind = if_else(playoffs == "Playoffs", true = 1, false = 0)) |> group_by(franchise) |> summarise(total = sum(playoffs_ind)) |> arrange(desc(total))

standings_top10 <- standings_df |> filter(playoffs == "Playoffs") |> group_by(franchise) |> summarise(total = n()) |> arrange(desc(total)) |> slice(1:10) |> mutate(franchise = fct_reorder(franchise, total))


ggplot(data = standings_top10, aes(x = franchise, y = total))+
  geom_point() +
  geom_segment(aes(xend = franchise, y = 0, yend = total)) +
  coord_flip()
```


